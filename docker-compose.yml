version: "3.7"
services:
  # |**************************************************|
  # |------------------ Server NGINX ------------------|
  nginx:
    container_name: nginx-learn
    image: nginx:latest
    volumes:
      - ./config/nginx/conf.d/:/etc/nginx/conf.d
      - ./config/nginx/ssl/:/etc/nginx/ssl
      - ./config/nginx/proxy_params:/etc/nginx/proxy_params
      - ${PROJECT_DIR}:/var/www
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - client
      - api
    networks:
      - dev


  # |**************************************************|
  # |------------ Server NodeJS (Frontend) ------------|
  client:
    container_name: client
    build:
      context: ./config/nodejs
    tty: true
    working_dir: /opt/server
    volumes:
      - ${PROJECT_DIR}:/opt/server
    env_file:
      - .env
    expose:
      - '3000'
    networks:
      - dev


  # |**************************************************|
  # |----------- Server NodeJS (API Backend) ----------|
  api:
    container_name: api
    build:
      context: ./config/nodejs
    tty: true
    working_dir: /opt/server
    volumes:
      - ${PROJECT_DIR}:/opt/server
    env_file:
      - .env
    expose:
      - '3000'
    depends_on:
      - postgres-learn
    networks:
      - dev


  # |**************************************************|
  # |------------ Server DataBase Postgres ------------|
  postgres:
    container_name: postgres-learn
    image: postgres:latest
    restart: always
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "5432:5432"
    networks:
      - dev


  # |**************************************************|
  # |------------ Server DB Management Tool -----------|
  adminer:
    image: adminer:latest
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - postgres-learn
    networks:
      - dev

  # |**************************************************|
  # |------------- Server Minio (AWS S3) --------------|
  minio:
    image: minio/minio:latest
    container_name: minio-learn
    restart: always
    command: server /data --console-address ":9001"
    environment:
      # Uncomment the following lines if you want to set custom credentials
      # Note: Ensure to set these variables in your .env file
      # MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      # MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - ./data/minio:/data
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - dev


  # |**************************************************|
  # |-------------- Server DataBase MySQL -------------|
  # mysql8:
  #   container_name: mysql8
  #   image: mysql:8.0
  #   volumes:
  #     - ./data/mysql8:/var/lib/mysql
  #     - ./config/mysql/8/my.cnf:/root/.my.cnf:ro
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #     MYSQL_DATABASE: ${MYSQL_DATABASE}
  #     MYSQL_USER: ${MYSQL_USER}
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #   networks:
  #     - dev

  # |**************************************************|
  # |------------ Server DataBase MongoDB -------------|
  # mongodb:
  #   image: mongo:4.2.3
  #   container_name: mongodb
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: admin
  #   volumes:
  #     - ./data/mongodb:/data/db
  #     - ${PROJECT_DIR}:/www
  #   ports:
  #     - '27017-27019:27017-27019'
  #   networks:
  #     - dev

  # |**************************************************|
  # |------------------ Server Redis ------------------|
  # redis:
  #   image: redis
  #   container_name: redis
  #   volumes:
  #     - ./data/redis:/data
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - dev

  # |**************************************************|
  # |------------------ Server RabbitMQ ----------------|
  # rabbitmq:
  #   image: rabbitmq:3-management
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   environment:
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
  #   networks:
  #     - dev


  # |**************************************************|
  # |------------------ Server Networks ----------------|

networks:
  dev:
    driver: bridge